from aiogram import F, Router, Bot
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from config import COMPANIES, CATEGORIES, ADMIN
from app.AdmFilt.Filters import IsAdmin
from app.database.models import async_session, Ticket, Status, Module
from app.admin_keyboard import status_change_keyboard
from sqlalchemy.future import select
from sqlalchemy.orm import selectinload
from app.notify_user import notify_user_about_status_change
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton, 
                           InlineKeyboardButton, InlineKeyboardMarkup)

import app.admin_keyboard as admin_kb

import re

def escape_markdown(text):
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã Markdown v1.
    """
    if not text:
        return "-"
    return re.sub(r'([_*\[\]()~`>#+=|{}.!-])', r'\\\1', str(text))


router = Router()
router.message.filter(IsAdmin())
router.callback_query.filter(IsAdmin())

class AdminStates(StatesGroup):
    waiting_for_ticket_id = State()
    waiting_for_status_change = State()

class CommentStates(StatesGroup):
    waiting_for_comment = State()

#–í—ã–≤–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "—Å—Ç–∞—Ä—Ç"
@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç, –ê–¥–º–∏–Ω! ü´°',
        reply_markup=admin_kb.admim_main)

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ê–¥–º–∏–Ω–∫–∞"
@router.callback_query(F.data == 'adminka')
async def ticket(callback:CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text('–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=admin_kb.status_or_report) 





#–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏"

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏
@router.callback_query(F.data == "ticket_change")
async def handle_ticket_change(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏")
    await state.set_state(AdminStates.waiting_for_ticket_id)
    await callback.answer()

#–µ—Å–ª–∏ –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª. –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
@router.message(AdminStates.waiting_for_ticket_id)
async def receive_ticket_id(message: Message, state: FSMContext):
    ticket_id = message.text.strip()
    if not ticket_id.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
        return

    ticket_id = int(ticket_id)

    async with async_session() as session:
        result = await session.execute(
            select(Ticket).options(selectinload(Ticket.status)).filter_by(ticket_id=ticket_id)
        )
        ticket = result.scalar_one_or_none()

        if not ticket:
            await message.answer(f"–ó–∞—è–≤–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º {ticket_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        await message.answer(
            f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ ‚Ññ{ticket_id}: {ticket.status.name}",
            reply_markup=status_change_keyboard(ticket_id)
        )
        await state.set_state(AdminStates.waiting_for_status_change)

#–í—ã–±–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏  
@router.callback_query(F.data.startswith("set_status_"))
async def process_status_change(callback: CallbackQuery, state: FSMContext, bot: Bot):
    
    action, ticket_id_str = callback.data.split(":")
    ticket_id = int(ticket_id_str)

    new_status_name = None
    if action == "set_status_in_progress":
        new_status_name = "–í —Ä–∞–±–æ—Ç–µ"
    elif action == "set_status_completed":
        new_status_name = "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"

    if new_status_name:
        async with async_session() as session:
            
            result = await session.execute(
            select(Ticket)
            .where(Ticket.ticket_id == ticket_id)
            .options(
                selectinload(Ticket.company),
                selectinload(Ticket.categories),
                selectinload(Ticket.status),
                selectinload(Ticket.module),
                selectinload(Ticket.user)
            )
                                       )
            ticket = result.scalar_one_or_none()
            
            old_status=ticket.status.name

            result = await session.execute(select(Status).filter_by(name=new_status_name))
            status_obj = result.scalar_one_or_none()

            ticket.status = status_obj
            await session.commit()

    

        await state.update_data(ticket_id=ticket_id, 
                                original_message_id=callback.message.message_id, 
                                chat_id=callback.message.chat.id,
                                new_status=new_status_name,
                                company_name=ticket.company.company_name,
                                module_name=ticket.module.name if ticket.module else None,
                                category_name=ticket.categories[0].name,
                                description=ticket.description,
                                comment_adm=None,
                                old_status=old_status,
                                changed_by=callback.from_user.full_name or callback.from_user.username
                            )
        
        if new_status_name == "–ó–∞–≤–µ—Ä—à–µ–Ω–∞":
            await callback.message.edit_text(
                text="–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?",
                reply_markup=admin_kb.comment_adm()
            )
        else:
            #—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤, –µ—Å–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            await send_notify_adm(
                bot=callback.bot,
                ticket_id=ticket_id,
                company_name=ticket.company.company_name,
                module_name=ticket.module.module_id if ticket.module else None,
                category_name=ticket.categories[0].name,
                description=ticket.description,
                comment_adm=None,
                old_status=old_status,
                new_status=new_status_name,
                changed_by=callback.from_user.full_name or callback.from_user.username
            )

                    #—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –µ–≥–æ –∑–∞—è–≤–∫–∏
            if ticket.user and ticket.user.user_id:
                await notify_user_about_status_change(
                    bot=callback.bot,
                    ticket=ticket,
                    new_status=new_status_name,
                    category_name=ticket.categories[0].name
            )

            

            await callback.message.edit_reply_markup(reply_markup=None)
        await callback.answer()
            

            






#–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞—è–≤–∫–µ"
#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞—è–≤–∫–µ"
@router.callback_query(F.data == 'view_ticket')
async def choice_view(callback:CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é", 
                                  reply_markup=admin_kb.choice_view_ticket()) 
    
#–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω–∫—É (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
@router.callback_query(F.data == "back_admin_menu")
async def ticket(callback:CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text('–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=admin_kb.status_or_report) 



#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞—è–≤–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –Ω–æ–≤–∞—è"
@router.callback_query(F.data == 'view_new')
async def view_new_tickets(callback: CallbackQuery):
    await callback.answer()
    
    async with async_session() as session:
        result = await session.execute(
            select(Ticket)
            .join(Ticket.status)
            .options(selectinload(Ticket.company), selectinload(Ticket.categories))
            .where(Status.name == "–ù–æ–≤–∞—è")
            .order_by(Ticket.ticket_id)
        )
        tickets = result.scalars().all()

    if not tickets:
        await callback.message.edit_text("–ù–µ—Ç –∑–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–ù–æ–≤–∞—è'")
        return

    builder = InlineKeyboardBuilder()

    for ticket in tickets:
        company_name = ticket.company.company_name if ticket.company else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        category_name = ticket.categories[0].name if ticket.categories else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        btn_text = f"–ó–∞—è–≤–∫–∞ ‚Ññ{ticket.ticket_id}, –∫–æ–º–ø–∞–Ω–∏—è - {company_name}, —Ç–∏–ø - {category_name}"
        builder.button(
            text=btn_text,
            callback_data=f"ticket_{ticket.ticket_id}"
        )

    builder.adjust(1)
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_new_view_menu")

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É:", reply_markup=builder.as_markup())    

#–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é, –≥–¥–µ –≤—ã–±–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–æ–∫
@router.callback_query(F.data == "back_new_view_menu")
async def back_new_view(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é", 
                                  reply_markup=admin_kb.choice_view_ticket()) 

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫, –≥–¥–µ –≤—ã–±—Ä–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –∏–∑ "–ù–æ–≤–∞—è" + –∫–ª–∞–≤–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å
@router.callback_query(F.data.startswith("ticket_"))
async def view_ticket_new_details(callback: CallbackQuery):
    ticket_id = int(callback.data.split("_")[1])
    
    async with async_session() as session:
        result = await session.execute(
            select(Ticket)
            .options(
                selectinload(Ticket.company),
                selectinload(Ticket.categories),
                selectinload(Ticket.user),
                selectinload(Ticket.media_files),
                selectinload(Ticket.status),
                selectinload(Ticket.module),
                selectinload(Ticket.user)
            )
            .where(Ticket.ticket_id == ticket_id)
        )
        ticket = result.scalar_one_or_none()

    if not ticket:
        await callback.message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    company = ticket.company.company_name
    category = ticket.categories[0].name
    user_name = ticket.user.name if ticket.user else "-"
    status = ticket.status.name
    module=ticket.module.module_id if ticket.module else "-"

    text = (
        f"–ó–∞—è–≤–∫–∞ ‚Ññ{ticket.ticket_id}\n"
        f"\n"
        f"–°—Ç–∞—Ç—É—Å: {status}\n"
        f"–ö–æ–º–ø–∞–Ω–∏—è: {company}\n"
        f"–ú–æ–¥—É–ª—å: {module}\n"
        f"–¢–∏–ø: {category}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {ticket.description}"
    )

    #–∏–Ω—Ñ–æ –æ –∑–∞—è–≤–∫–µ
    media = ticket.media_files[0] if ticket.media_files else None

    if media:
        try:
            if media.file_type == "photo":
                await callback.message.answer_photo(
                    photo=media.file_id,
                    caption=text
                )
            elif media.file_type == "video":
                await callback.message.answer_video(
                    video=media.file_id,
                    caption=text
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞: {e}")
            await callback.message.answer(text)
    else:
        await callback.message.edit_text(text)

    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_new")],
            [InlineKeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å '–í —Ä–∞–±–æ—Ç–µ'", 
                                  callback_data=f"seet_status_work:{ticket.ticket_id}")],
            [InlineKeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'", 
                                  callback_data=f"seedt_status_done:{ticket.ticket_id}")]
        ])
    )


#–°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞  –ù–æ–≤–∞—è -> –ó–∞–≤–µ—Ä—à–µ–Ω–∞
@router.callback_query(F.data.startswith("seedt_status_"))
async def update_dticket_status(callback: CallbackQuery, state: FSMContext):
    print("–°—Ä–∞–±–æ—Ç–∞–ª –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞")
    await callback.answer()

    try:
        action, ticket_id_str = callback.data.split(":")
        ticket_id = int(ticket_id_str)
    except ValueError:
        await callback.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    new_status = "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"

    async with async_session() as session:

        status_result = await session.execute(
            select(Status).where(Status.name == new_status)
        )
        status = status_result.scalar_one_or_none()


        result = await session.execute(
            select(Ticket)
            .where(Ticket.ticket_id == ticket_id)
            .options(
                selectinload(Ticket.company),
                selectinload(Ticket.categories),
                selectinload(Ticket.status),
                selectinload(Ticket.module),
                selectinload(Ticket.user)
            )
        )
        ticket = result.scalar_one_or_none()

        old_status = ticket.status.name
        ticket.status_id = status.status_id
        await session.commit()

        #—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –µ–≥–æ –∑–∞—è–≤–∫–∏
        if ticket.user and ticket.user.user_id:
            await notify_user_about_status_change(
                bot=callback.bot,
                ticket=ticket,
                new_status=new_status,
                category_name=ticket.categories[0].name
          )

        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"
        if new_status == "–ó–∞–≤–µ—Ä—à–µ–Ω–∞":

            await state.update_data(
                ticket_id=ticket.ticket_id,
                original_message_id=callback.message.message_id,
                chat_id=callback.message.chat.id,
                old_status=old_status,
                new_status=new_status,
                company_name=ticket.company.company_name,
                module_name=ticket.module.name if ticket.module else None,
                category_name=ticket.categories[0].name,
                description=ticket.description,
                changed_by=callback.from_user.full_name or callback.from_user.username
            )

            await callback.message.edit_text(
                text="–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?",
                reply_markup=admin_kb.comment_adm()
            )


#–°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞  –ù–æ–≤–∞—è -> –í —Ä–∞–±–æ—Ç–µ
@router.callback_query(F.data.startswith("seet_status_"))
async def update_ticket_status(callback: CallbackQuery):
    print("–°—Ä–∞–±–æ—Ç–∞–ª –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞")
    await callback.answer()

    try:
        action, ticket_id_str = callback.data.split(":")
        ticket_id = int(ticket_id_str)
    except ValueError:
        await callback.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    new_status = "–í —Ä–∞–±–æ—Ç–µ"

    async with async_session() as session:

        status_result = await session.execute(
            select(Status).where(Status.name == new_status)
        )
        status = status_result.scalar_one_or_none()

        result = await session.execute(
            select(Ticket)
            .where(Ticket.ticket_id == ticket_id)
            .options(
                selectinload(Ticket.company),
                selectinload(Ticket.categories),
                selectinload(Ticket.status),
                selectinload(Ticket.module),
                selectinload(Ticket.user)
            )
        )
        ticket = result.scalar_one_or_none()

        old_status = ticket.status.name
        ticket.status_id = status.status_id
        await session.commit()

        #—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –µ–≥–æ –∑–∞—è–≤–∫–∏
        if ticket.user and ticket.user.user_id:
            await notify_user_about_status_change(
                bot=callback.bot,
                ticket=ticket,
                new_status=new_status,
                category_name=ticket.categories[0].name
          )

        await send_notify_adm(
            bot=callback.bot,
            ticket_id=ticket.ticket_id,
            company_name=ticket.company.company_name,
            module_name=ticket.module.name if ticket.module else None,
            category_name=ticket.categories[0].name,
            description=ticket.description,
            comment_adm=ticket.comment_adm,
            old_status=old_status,
            new_status=new_status,
            changed_by=callback.from_user.full_name or callback.from_user.username
        )
        await callback.message.edit_reply_markup(reply_markup=None)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫ "–ù–æ–≤–∞—è"
@router.callback_query(F.data == "back_new")
async def back_to_new(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    async with async_session() as session:
        result = await session.execute(
            select(Ticket)
            .join(Ticket.status)
            .options(selectinload(Ticket.company), selectinload(Ticket.categories))
            .where(Status.name == "–ù–æ–≤–∞—è")
            .order_by(Ticket.ticket_id)
        )
        tickets = result.scalars().all()

    if not tickets:
        await callback.message.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–ù–æ–≤–∞—è'")
        return

    builder = InlineKeyboardBuilder()

    for ticket in tickets:
        company_name = ticket.company.company_name if ticket.company else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        category_name = ticket.categories[0].name if ticket.categories else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        btn_text = f"–ó–∞—è–≤–∫–∞ ‚Ññ{ticket.ticket_id}, –∫–æ–º–ø–∞–Ω–∏—è - {company_name}, —Ç–∏–ø - {category_name}"
        builder.button(
            text=btn_text,
            callback_data=f"ticket_{ticket.ticket_id}"
        )

    builder.adjust(1)
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_admin_menu")

    try:
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É:", reply_markup=builder.as_markup())
    except Exception:
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É:", reply_markup=builder.as_markup())










#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞—è–≤–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –í —Ä–∞–±–æ—Ç–µ"
@router.callback_query(F.data == 'view_work')
async def view_work_tickets(callback: CallbackQuery):
    await callback.answer()
    
    async with async_session() as session:
        result = await session.execute(
            select(Ticket)
            .join(Ticket.status)
            .options(selectinload(Ticket.company), selectinload(Ticket.categories))
            .where(Status.name == "–í —Ä–∞–±–æ—Ç–µ")
            .order_by(Ticket.ticket_id)
        )
        tickets = result.scalars().all()

    if not tickets:
        await callback.message.edit_text("–ù–µ—Ç –∑–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–í —Ä–∞–±–æ—Ç–µ'")
        return

    builder = InlineKeyboardBuilder()

    for ticket in tickets:
        company_name = ticket.company.company_name if ticket.company else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        category_name = ticket.categories[0].name if ticket.categories else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        btn_text = f"–ó–∞—è–≤–∫–∞ ‚Ññ{ticket.ticket_id}, –∫–æ–º–ø–∞–Ω–∏—è - {company_name}, —Ç–∏–ø - {category_name}"
        builder.button(
            text=btn_text,
            callback_data=f"work_ticket_{ticket.ticket_id}"
        )

    builder.adjust(1)
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_work_view_menu")

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É:", reply_markup=builder.as_markup())    

#–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é, –≥–¥–µ –≤—ã–±–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–æ–∫
@router.callback_query(F.data == "back_work_view_menu")
async def back_work_view(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é", 
                                  reply_markup=admin_kb.choice_view_ticket()) 

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫, –≥–¥–µ –≤—ã–±—Ä–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ "–í —Ä–∞–±–æ—Ç–µ"
@router.callback_query(F.data.startswith("work_ticket_"))
async def view_ticket_work_details(callback: CallbackQuery):
    await callback.message.delete()
    ticket_id = int(callback.data.split("_")[-1])
    
    async with async_session() as session:
        result = await session.execute(
            select(Ticket)
            .options(
                selectinload(Ticket.company),
                selectinload(Ticket.categories),
                selectinload(Ticket.user),
                selectinload(Ticket.media_files),
                selectinload(Ticket.status),
                selectinload(Ticket.module),
                selectinload(Ticket.user)
            )
            .where(Ticket.ticket_id == ticket_id)
        )
        ticket = result.scalar_one_or_none()

    if not ticket:
        await callback.message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    company = ticket.company.company_name
    category = ticket.categories[0].name
    user_name = ticket.user.name if ticket.user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    status = ticket.status.name
    module=ticket.module.module_id if ticket.module else "-"

    text = (
        f"–ó–∞—è–≤–∫–∞ ‚Ññ{ticket.ticket_id}\n"
        f"\n"
        f"–°—Ç–∞—Ç—É—Å: {status}\n"
        f"–ö–æ–º–ø–∞–Ω–∏—è: {company}\n"
        f"–ú–æ–¥—É–ª—å: {module}\n"
        f"–¢–∏–ø: {category}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {ticket.description}"
    )

    #–∏–Ω—Ñ–æ –æ –∑–∞—è–≤–∫–µ
    media = ticket.media_files[0] if ticket.media_files else None

    if media:
        try:
            if media.file_type == "photo":
                await callback.message.answer_photo(
                    photo=media.file_id,
                    caption=text
                )
            elif media.file_type == "video":
                await callback.message.answer_video(
                    video=media.file_id,
                    caption=text
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞: {e}")
            await callback.message.answer(text)
    else:
        await callback.message.answer(text)

    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_work")],
            [InlineKeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'", 
                                  callback_data=f"seeet_status_done:{ticket.ticket_id}")]
        ])
    )


#–°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –í —Ä–∞–±–æ—Ç–µ -> –ó–∞–≤–µ—Ä—à–µ–Ω–æ
@router.callback_query(F.data.startswith("seeet_status_"))
async def updatee_ticket_status(callback: CallbackQuery, state: FSMContext):
    print("–°—Ä–∞–±–æ—Ç–∞–ª –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞")
    await callback.answer()

    try:
        action, ticket_id_str = callback.data.split(":")
        ticket_id = int(ticket_id_str)
    except ValueError:
        await callback.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    new_status = "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"

    async with async_session() as session:

        status_result = await session.execute(select(Status).where(Status.name == new_status))
        status = status_result.scalar_one_or_none()

        result = await session.execute(
            select(Ticket)
            .where(Ticket.ticket_id == ticket_id)
            .options(
                selectinload(Ticket.company),
                selectinload(Ticket.categories),
                selectinload(Ticket.status),
                selectinload(Ticket.module),
                selectinload(Ticket.user)
            )
        )
        ticket = result.scalar_one_or_none()

        old_status = ticket.status.name
        ticket.status_id = status.status_id
        await session.commit()

        #—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –µ–≥–æ –∑–∞—è–≤–∫–∏
        if ticket.user and ticket.user.user_id:
            await notify_user_about_status_change(
                bot=callback.bot,
                ticket=ticket,
                new_status=new_status,
                category_name=ticket.categories[0].name
          )

        if new_status == "–ó–∞–≤–µ—Ä—à–µ–Ω–∞":

            await state.update_data(
                ticket_id=ticket.ticket_id,
                original_message_id=callback.message.message_id,
                chat_id=callback.message.chat.id,
                old_status=old_status,
                new_status=new_status,
                company_name=ticket.company.company_name,
                module_name=ticket.module.name if ticket.module else None,
                category_name=ticket.categories[0].name,
                description=ticket.description,
                changed_by=callback.from_user.full_name or callback.from_user.username
            )

            await callback.message.edit_text(
                text="–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?",
                reply_markup=admin_kb.comment_adm()
            )




#–ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Å—Ç–∞—Ç—É—Å "–∑–∞–≤–µ—Ä—à–µ–Ω–∞" –∏ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?"
@router.callback_query(F.data == "com_adm")
async def add_comment_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ")
    await state.set_state(CommentStates.waiting_for_comment)
    await callback.answer() 

#–≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ–≥–¥–∞ –∑–∞—è–≤–∫–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–∑–∞–≤–µ—Ä—à–µ–Ω–∞"
@router.callback_query(F.data == "finish_status")
async def finish_without_comment(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    await send_notify_adm(
        bot=callback.bot,
        ticket_id=data["ticket_id"],
        company_name=data["company_name"],
        module_name=data.get("module_name"),
        category_name=data["category_name"],
        description=data["description"],
        comment_adm=None,
        old_status=data["old_status"],
        new_status=data["new_status"],
        changed_by=data["changed_by"]
    )
    await callback.message.edit_reply_markup(reply_markup=None)

    await state.clear()
    await callback.answer()

#–≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ–≥–¥–∞ –∑–∞—è–≤–∫–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–∑–∞–≤–µ—Ä—à–µ–Ω–∞" –∏ –µ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç
@router.message(CommentStates.waiting_for_comment)
async def save_comment(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    ticket_id = data['ticket_id']
    original_message_id = data['original_message_id']
    chat_id = data['chat_id']
    comment_text = message.text

    async with async_session() as session:
        result = await session.execute(
            select(Ticket)
            .options(
                selectinload(Ticket.company),
                selectinload(Ticket.status),
                selectinload(Ticket.categories),
                selectinload(Ticket.module)
            )
            .where(Ticket.ticket_id == ticket_id)
        )
        ticket = result.scalar_one_or_none()

        ticket.comment_adm = comment_text
        await session.commit()

    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)

    await send_notify_adm(
        bot=bot,
        ticket_id=ticket_id,
        company_name=data['company_name'],
        module_name=ticket.module.name if ticket.module else None,
        category_name=data['category_name'],
        description=data['description'],
        comment_adm=comment_text,
        old_status=data['old_status'],
        new_status="–ó–∞–≤–µ—Ä—à–µ–Ω–∞",
        changed_by=data['changed_by']
    )

    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫ "–í —Ä–∞–±–æ—Ç–µ"
@router.callback_query(F.data == "back_work")
async def back_to_work(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    async with async_session() as session:
        result = await session.execute(
            select(Ticket)
            .join(Ticket.status)
            .options(selectinload(Ticket.company), selectinload(Ticket.categories))
            .where(Status.name == "–í —Ä–∞–±–æ—Ç–µ")
            .order_by(Ticket.ticket_id)
        )
        tickets = result.scalars().all()

    if not tickets:
        await callback.message.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–ù–æ–≤–∞—è'")
        return

    builder = InlineKeyboardBuilder()
    
    for ticket in tickets:
        company_name = ticket.company.company_name if ticket.company else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        category_name = ticket.categories[0].name if ticket.categories else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        btn_text = f"–ó–∞—è–≤–∫–∞ ‚Ññ{ticket.ticket_id}, –∫–æ–º–ø–∞–Ω–∏—è - {company_name}, —Ç–∏–ø - {category_name}"
        builder.button(
            text=btn_text,
            callback_data=f"ticket_{ticket.ticket_id}"
        )

    builder.adjust(1)
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_admin_menu")

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É:", reply_markup=builder.as_markup())



#–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ (+ –∫–æ–º–º–µ–Ω—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å –∏ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è)    
async def send_notify_adm(bot:Bot, ticket_id: int, company_name: str, category_name:str, description: str, comment_adm: str, old_status:str, new_status: str, changed_by:str, module_name:str = None):

    status_text = (
        "üì© *–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏*\n"
        f"–ù–æ–º–µ—Ä: {ticket_id}\n"
        f"C—Ç–∞—Ç—É—Å: {escape_markdown(old_status)} -> {escape_markdown(new_status)}\n"
        f"–ö–æ–º–ø–∞–Ω–∏—è: {escape_markdown(company_name)}\n"
        + (f"–ú–æ–¥—É–ª—å: {escape_markdown(module_name)}\n" if module_name else "")
        + f"–¢–∏–ø: {escape_markdown(category_name)}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {escape_markdown(description)}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {escape_markdown(comment_adm)}\n"
        f"–ö—Ç–æ –ø–æ–º–µ–Ω—è–ª —Å—Ç–∞—Ç—É—Å: {escape_markdown(changed_by)}"
)
    
    for admin_id in ADMIN:

                await bot.send_message(
                chat_id=admin_id,
                text=status_text,
                parse_mode='Markdown'
            )